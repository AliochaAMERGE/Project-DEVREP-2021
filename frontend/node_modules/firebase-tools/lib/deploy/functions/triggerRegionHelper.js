"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lookupMissingTriggerRegions = void 0;
const backend = require("./backend");
const storage = require("../../gcp/storage");
const error_1 = require("../../error");
const logger_1 = require("../../logger");
const noop = () => Promise.resolve();
const LOOKUP_BY_EVENT_TYPE = {
    "google.cloud.pubsub.topic.v1.messagePublished": noop,
    "google.cloud.storage.object.v1.finalized": lookupBucketRegion,
    "google.cloud.storage.object.v1.archived": lookupBucketRegion,
    "google.cloud.storage.object.v1.deleted": lookupBucketRegion,
    "google.cloud.storage.object.v1.metadataUpdated": lookupBucketRegion,
};
async function lookupMissingTriggerRegions(want) {
    const regionLookups = [];
    for (const ep of backend.allEndpoints(want)) {
        if (ep.platform === "gcfv1" || !backend.isEventTriggered(ep) || ep.eventTrigger.region) {
            continue;
        }
        const lookup = LOOKUP_BY_EVENT_TYPE[ep.eventTrigger.eventType];
        if (!lookup) {
            logger_1.logger.debug("Don't know how to look up trigger region for event type", ep.eventTrigger.eventType, ". Deploy will fail unless this event type is global");
            continue;
        }
        regionLookups.push(lookup(ep));
    }
    await Promise.all(regionLookups);
}
exports.lookupMissingTriggerRegions = lookupMissingTriggerRegions;
async function lookupBucketRegion(endpoint) {
    try {
        const bucket = await storage.getBucket(endpoint.eventTrigger.eventFilters.bucket);
        endpoint.eventTrigger.region = bucket.location.toLowerCase();
    }
    catch (err) {
        throw new error_1.FirebaseError("Can't find the storage bucket region", { original: err });
    }
}
